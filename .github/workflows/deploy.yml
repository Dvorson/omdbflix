name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1 # Change this to your preferred region
  ECR_REPOSITORY: ziggo-movie-app # Change this to your ECR repository name
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: Run Tests
        working-directory: frontend
        run: npm run test:coverage

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only run deployment on push to main, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Application
        working-directory: frontend
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Process Kubernetes manifests
        run: |
          # Replace placeholders in Kubernetes manifests
          export REDIS_URL_BASE64=$(echo -n "${{ secrets.REDIS_URL }}" | base64)
          export OMDB_API_KEY_BASE64=$(echo -n "${{ secrets.OMDB_API_KEY }}" | base64)
          
          # Replace variables in manifests
          for file in k8s/aws/*.yaml; do
            sed -i "s|\${AWS_ACCOUNT_ID}|$AWS_ACCOUNT_ID|g" $file
            sed -i "s|\${AWS_REGION}|$AWS_REGION|g" $file
            sed -i "s|\${REDIS_URL_BASE64}|$REDIS_URL_BASE64|g" $file
            sed -i "s|\${OMDB_API_KEY_BASE64}|$OMDB_API_KEY_BASE64|g" $file
          done

      - name: Deploy to Kubernetes
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: apply -f k8s/aws/namespace.yaml

      - name: Deploy secrets
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: apply -f k8s/aws/secrets.yaml

      - name: Deploy application
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: apply -f k8s/aws/deployment.yaml -f k8s/aws/service.yaml

      - name: Verify deployment
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout status deployment/ziggo-movie-app -n ziggo 