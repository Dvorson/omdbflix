name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all workspace dependencies from root
      
    - name: Run Linters
      run: |
        # Run frontend linting
        cd frontend && npm run lint
        # Run backend linting - now errors are fixed
        cd ../backend && npm run lint
    
    - name: Build Shared Types Package
      run: cd packages/types && npm run build
      
    - name: Run Backend Type Check
      run: cd backend && tsc --noEmit
      
    - name: Run Frontend Type Check (App)
      run: cd frontend && npm run type-check # Uses tsconfig.app.json

  test-backend:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check] # Depend on the new job
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all dependencies
      
    - name: Run backend tests
      run: cd backend && npm test # Assumes backend test script is sufficient
      env:
        NODE_ENV: test
  
  test-frontend:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check] # Depend on the new job
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all dependencies
      
    - name: Run frontend tests
      run: cd frontend && npm test # Assumes frontend test script is sufficient

  e2e-tests:
    runs-on: ubuntu-latest
    # Depend on lint/types AND unit tests
    needs: [lint-and-type-check, test-backend, test-frontend] 
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all dependencies from root
      
    - name: Install Playwright browsers
      # Run from root now
      run: npx playwright install --with-deps 
      
    - name: Create backend .env file
      run: |
        echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" > backend/.env
        echo "BACKEND_PORT=5000" >> backend/.env
        echo "NODE_ENV=test" >> backend/.env
        echo "OMDB_API_URL=http://www.omdbapi.com" >> backend/.env
        echo "JWT_SECRET=test_jwt_secret_for_ci" >> backend/.env
        echo "SESSION_SECRET=test_session_secret_for_ci" >> backend/.env
        echo "FRONTEND_URL=http://localhost:3000" >> backend/.env
        
    # Start services using the root command defined in playwright.config.ts
    # This will handle starting both frontend & backend
    # Run in background (&)
    - name: Start Application (via npm run dev)
      run: npm run dev &
      env:
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
        NODE_ENV: test
        JWT_SECRET: test_jwt_secret_for_ci
        SESSION_SECRET: test_session_secret_for_ci
        FRONTEND_URL: http://localhost:3000

    # Add a wait step for the webServer URL to be ready
    - name: Wait for Frontend Server (Port 3000)
      run: npx wait-on http://localhost:3000 --timeout 120000 # Wait up to 120s

    - name: Run E2E tests
      # Run from root now
      run: npx playwright test 
      env:
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }} # Ensure tests have access if needed directly
        E2E_BASE_URL: http://localhost:3000 # Explicitly set base URL
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        # Path relative to root now
        path: playwright-report/ 

  deploy:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        
    # Deploy frontend to Vercel
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Deploy Frontend to Vercel
      working-directory: ./frontend
      run: |
        vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
        NEXT_PUBLIC_API_URL: ${{ secrets.RAILWAY_BACKEND_URL }}
        
    # Deploy backend to Railway
    - name: Install Railway CLI
      run: npm install -g @railway/cli
      
    - name: Deploy Backend to Railway
      working-directory: ./backend
      run: |
        railway up
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }} 