name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all workspace dependencies from root
      
    - name: Run Linters
      run: npm run lint
      
    - name: Run Backend Type Check
      run: cd backend && tsc --noEmit
      
    - name: Run Frontend Type Check (App)
      run: cd frontend && npm run type-check # Uses tsconfig.app.json

  test-backend:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check] # Depend on the new job
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all dependencies
      
    - name: Run backend tests
      run: cd backend && npm test # Assumes backend test script is sufficient
  
  test-frontend:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check] # Depend on the new job
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all dependencies
      
    - name: Run frontend tests
      run: cd frontend && npm test # Assumes frontend test script is sufficient

  e2e-tests:
    runs-on: ubuntu-latest
    # Depend on lint/types AND unit tests
    needs: [lint-and-type-check, test-backend, test-frontend] 
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: package-lock.json # Use root lockfile
        
    - name: Install Root Dependencies
      run: npm ci # Install all dependencies from root
      
    - name: Install Playwright browsers
      # Run from root now
      run: npx playwright install --with-deps 
      
    - name: Create backend .env file
      run: |
        echo "OMDB_API_KEY=${{ secrets.OMDB_API_KEY }}" > backend/.env
        echo "PORT=5000" >> backend/.env
        echo "NODE_ENV=test" >> backend/.env
        echo "OMDB_API_URL=http://www.omdbapi.com" >> backend/.env
        
    # Start services using the root command defined in playwright.config.ts
    # This will handle starting both frontend & backend
    # Run in background (&)
    - name: Start Application (via npm run dev)
      run: npm run dev &
      env:
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }} # Pass secret to dev command
        # Add other necessary env vars for dev command if needed

    # Add a wait step for the webServer URL to be ready
    - name: Wait for Frontend Server (Port 3000)
      run: npx wait-on http://localhost:3000 --timeout 120000 # Wait up to 120s

    - name: Run E2E tests
      # Run from root now
      run: npx playwright test 
      env:
        OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }} # Ensure tests have access if needed directly
        E2E_BASE_URL: http://localhost:3000 # Explicitly set base URL
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        # Path relative to root now
        path: playwright-report/ 

  build-and-push:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/movie-explorer-api:latest
        
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/movie-explorer-frontend:latest
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    # Install kustomize (could also use a setup action)
    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set up Kubernetes config
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    # Inject secrets directly into kustomize overlay if needed, 
    # or rely on base secret being patched/created.
    # Example: Patching the base secret directly (alternative to creating via kubectl)
    # - name: Create Kustomization Patch for Secret
    #   run: |
    #     echo "apiVersion: v1" > ./k8s/overlays/aws/secrets-patch.yaml
    #     echo "kind: Secret" >> ./k8s/overlays/aws/secrets-patch.yaml
    #     echo "metadata:" >> ./k8s/overlays/aws/secrets-patch.yaml
    #     echo "  name: movie-explorer-secrets" >> ./k8s/overlays/aws/secrets-patch.yaml
    #     echo "stringData:" >> ./k8s/overlays/aws/secrets-patch.yaml
    #     echo "  omdb-api-key: ${{ secrets.OMDB_API_KEY }}" >> ./k8s/overlays/aws/secrets-patch.yaml
    # - name: Add Secret Patch to Kustomization
    #   run: kustomize edit add patch --path ./k8s/overlays/aws/secrets-patch.yaml --kind Secret --name movie-explorer-secrets
    #   working-directory: ./k8s/overlays/aws

    # OR: Create secret using kubectl (as done previously is fine too)
    - name: Update Kubernetes secrets
      run: |
        kubectl create secret generic movie-explorer-secrets \
          --namespace movie-explorer \
          --from-literal=omdb-api-key=${{ secrets.OMDB_API_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy using Kustomize (AWS Overlay)
      env:
        # Set for image tag substitution in kustomization.yaml
        IMAGE_TAG: ${{ github.sha }}
        # Set DOCKER_USERNAME for placeholder substitution if needed
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} 
      run: |
        cd k8s/overlays/aws # Navigate to the overlay directory
        # Substitute placeholders if necessary BEFORE building
        # Example: Replace 'your-dockerhub-username' in kustomization.yaml if not using env vars directly
        # sed -i "s|your-dockerhub-username|$DOCKER_USERNAME|g" kustomization.yaml 
        
        # Build and apply the manifests
        kustomize build . | kubectl apply -f -
        
    - name: Verify deployment rollout
      run: |
        kubectl rollout status deployment/frontend -n movie-explorer
        kubectl rollout status deployment/backend-api -n movie-explorer 